gdybym mial powiedziec co cenie w zyciu najbardizej powiedzialbym ze ludzi ludzi ktorzy podali mi pomocna dlon kiedy sobie nie radzilem kiedy bylem sam i co ciekawe to przypadkowe spotkania wplywaja na nasze zycie chodzi o to ze kiedy wyznaje sie pewne wartosci nawet z pozoru uniwersalne bywa ze nie znajduje sie zrozumienia ktore by tak rzec ktore pomaga sie nam rozwijac ja mialem szczescie by tak rzec poniewaz je znalazlem i dziekuje zyciu dziekuje mu zycie to spiew zycie to taniec zycie to zyc



using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Security;
using System.Reflection.PortableExecutable;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;

namespace KluczJednorazowy
{
    internal class MainProgram
    {
        static void Main(string[] args)
        {
            switch(args[0])
            {
                case "-p":
                    Parser();
                    break;
                case "-e":
                    Encrypter();
                    break;
                case "-k":
                    break;
                default:
                    Helper();
                    break;
            }
        }

        static async void Parser()
        {
            Console.WriteLine("Parser");
            string text = System.IO.File.ReadAllText(@"orig.txt");
            string key = System.IO.File.ReadAllText(@"key.txt");
            Console.WriteLine("Długość pliku= {0}", text.Length);
            Console.WriteLine("Długość linijki = {0}",key.Length);
            string[] lines = new string[text.Length / key.Length];
            int j = 0;
            for(int i=0; i<text.Length;i++)
            {
                if(i%10==0 && i!=0)
                {
                    
                    j++;
                }
                lines[j] += text[i];
            }
            await File.WriteAllLinesAsync("plain.txt", lines);
        }

        static async void Encrypter()
        {
            Console.WriteLine("Encrypter");
            string key = System.IO.File.ReadAllText(@"key.txt");
            
            List<string> lines = new List<string>();
            string encryptedLine = string.Empty;
            foreach (string line in System.IO.File.ReadLines(@"plain.txt"))
            {
                encryptedLine = "";
                for (int i = 0; i<key.Length;i++)
                {
                    encryptedLine += LetterToBinaryAndBack(line[i], key[i]);
                    
                }
                Console.WriteLine(encryptedLine);
                lines.Add(encryptedLine);
            }
            await File.WriteAllLinesAsync("crypto.txt", lines);
        }

        static string LetterToBinaryAndBack(char word,char key)
        {
            byte wordByte = Convert.ToByte(word);
            string wordBinary = Convert.ToString(wordByte,2);
            string answer = XoR(wordBinary, key);

            return answer;
     
        }

        static string XoR(string wordBinary,char key)
        {
            string answer = string.Empty;
            for(int i=0; i<wordBinary.Length; i++)
            {
                if (wordBinary[i] == key)
                {
                    answer += '0';
                }
                else
                {
                    answer += '1';
                }

            }
            Console.WriteLine(answer);
            return answer;
        }
        static void Cryptoanalizer()
        {
            Console.WriteLine("Cryptoanaliser");
        }

        static void Helper()
        {
            Console.WriteLine("Helper");
        }
    }

}
// END OF PROGRAM ... Written by Mateusz Redzimski 266601